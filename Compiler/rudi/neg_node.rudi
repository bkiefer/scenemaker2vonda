
setup_neg_node: 
	if(hello_node.initiated.contains("neg_node")) {
		if(!neg_node.active) {

			neg_node.active = true;
			hello_node.super_children += neg_node;

		}

		neg_node.simple_children += "neg_node_in";
		hello_node.initiated -= "neg_node";
	}


pass_by_neg_node: 
	if(!neg_node.active) {
		cancel;
	}

neg_node_interruptive_edge_1:
	if( lastDA() >= Question(Mood) ) {

		interruptive_transition(neg_node, hello_node, "answer_node");

		cancel;
	}

neg_node_in:
	if(neg_node.simple_children.contains("neg_node_in")) {

			

			transition("neg_node_in", "no_node", neg_node, neg_node);

			check_out_transition("neg_node_in", "neg_node_out", neg_node, neg_node);
	}

neg_node_out: 
	if(neg_node.simple_children.contains("neg_node_out")) {

		transition("neg_node_out", "answer_node", neg_node, hello_node);
		transition("neg_node_out", "something_else_node", neg_node, hello_node);
		if(test_inactive(neg_node)) {

			hello_node.super_children -= neg_node;
			set_inactive(neg_node);
		}

		check_out_transition("neg_node_out", "hello_node_out", neg_node, hello_node);
	}

no_node:
	if(neg_node.simple_children.contains("no_node")) {

		if(!hasActiveTimeout(no_node)) {

			emitDA("Oh no!");

			emitDA("Oh no!");

		}

		transition("no_node", "happy_node", neg_node, neg_node);
		transition("no_node", "joke_node", neg_node, neg_node);
		transition("no_node", "sorry_node", neg_node, neg_node);

		check_out_transition("no_node", "neg_node_out", neg_node, neg_node);
	}

sorry_node:
	if(neg_node.simple_children.contains("sorry_node")) {

		if(!hasActiveTimeout(sorry_node)) {

			emitDA("I'm so sorry");

			emitDA("I'm so sorry");

		}


		check_out_transition("sorry_node", "neg_node_out", neg_node, neg_node);
	}

joke_node:
	if(neg_node.simple_children.contains("joke_node")) {

		if(!hasActiveTimeout(joke_node)) {

			emitDA("joke");

			emitDA("joke");

		}


		check_out_transition("joke_node", "neg_node_out", neg_node, neg_node);
	}

happy_node:
	if(neg_node.simple_children.contains("happy_node")) {

		if(!hasActiveTimeout(happy_node)) {

			emitDA("Tomorrow will be a happy day again");

			emitDA("Tomorrow will be a happy day again");

		}


		check_out_transition("happy_node", "neg_node_out", neg_node, neg_node);
	}

