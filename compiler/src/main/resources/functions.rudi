void set_inactive(Supernode m) {
  for (String x : m.simple_children) {
    removeTimeout(x);
  }
  for (Supernode y : m.super_children) {
    set_inactive(y);
  }

  m.active = false;
  m.simple_children={};
  m.imminent_simple_children={};
  m.super_children={};
  m.initiated={};
}

boolean test_inactive(Supernode m) {
  return ((!m.super_children) && (!m.simple_children) && (!m.initiated));
}

void transition(String node_a, String node_b, Supernode a_parent,
                Supernode b_parent, boolean targetNodeIsSupernode) {

  if (a_parent.simple_children.contains(node_a)) {
    cancelTimeout(node_a);
    a_parent.simple_children -= node_a;

    if (a_parent.imminent_simple_children.contains(node_a)) {
      a_parent.imminent_simple_children -= node_a;
    }

    if (targetNodeIsSupernode) {
      b_parent.initiated += node_b;
    } else {
      b_parent.simple_children += node_b;
      b_parent.imminent_simple_children += node_b;
    }
  }
}

void check_out_transition(String a, String b, Supernode a_parent,
                          Supernode b_parent) {
  if (!hasActiveTimeout(a) && a_parent.simple_children.contains(a)) {
    transition(a, b, a_parent, b_parent, false);
  }
}

void timeout_transition(String node_a, String node_b, Supernode a_parent,
                        Supernode b_parent, boolean targetNodeIsSupernode,
                        int duration) {
  timeout(node_a, duration) {
    transition(node_a, node_b, a_parent, b_parent, targetNodeIsSupernode);
  }
}

void probability_transition(String node_a, String node_b, Supernode a_parent,
                            Supernode b_parent, boolean targetNodeIsSupernode) {
  propose_id = "propose" + node_a;
  propose(propose_id) {
    transition(node_a, node_b, a_parent, b_parent, targetNodeIsSupernode);
  }
}

void interruptive_transition(Supernode m, Supernode parent, String target_node,
                             boolean targetNodeIsSupernode) {
  set_inactive(m);
  if (targetNodeIsSupernode) {
    parent.initiated += target_node;
  } else {
    parent.simple_children += target_node;
    parent.imminent_simple_children += target_node;
  }
}
