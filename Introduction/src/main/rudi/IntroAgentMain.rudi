
states = {"hello_node_in"} // Globaler Startknoten --> Rekursiv
import("hello_node") // hello_nodes Superknoten werden rekursiv importiert


void transition (String node_a, String node_b, fork_edge = false) {

	removeTimeout(node_a);

	if(fork_edge == false){
		states.remove(node_a);
	}

	states.add(node_b);

}

void check_out_transition(String node, String out_node) {

	if (!hasActiveTimeout(node) && states.contains(node)) { 
	
		transition(node, out_node);
	}
}

void timeout_transition(String node_a, String node_b, Int duration) {

	timeout(node_a, duration) {

		transition(node_a, node_b);
	}
}

void probability_transition(String node_a, String node_b) {

	propose_id = "propose_"+ node_a;

	propose(propose_id) {
						
		transition(node_a, node_b);
	}
}


// TODO: Wie kann man die condition in VonDa evaluieren???
void conditional_transition(String node_a, String node_b, String condition) {

	if(eval(condition) {
		transition(node_a, node_b);
	}
}

void fork_transition(String node_a, String node_b) {
						
		transition(node_a, node_b, fork_edge = true);
}


if ("bye_node" in states) {
	
	emitDA(#Valediction(Bye));

	timeout("shutdown", 3000) {
		clearBehaviorsAndProposals();
		shutdown();
	}
}

