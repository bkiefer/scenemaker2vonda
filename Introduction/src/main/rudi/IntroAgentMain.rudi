

// TODO: Nur beim ersten Start, irgendwie noch anpassen! Zus√§tzlich muss das Top-Level-Objekt erst einmal erstellt werden
top_level.simple_children += hello_node_in;

import("hello_node")

void set_inactive(Supernode m) {

	for (String x : m.simple_children) {
		removeTimeout(x);
	}

	// TODO: How to write this properly?
	m.simplechildren = null;

	for (Supernode x : m.super_children) {
		set.inactive(x);
   	}
}

boolean test_active_offspring(Supernode m) {
 
	if ((!m.super_children) && (!m.simple_children)) {
		return false;
	}

	else {
		return true;
	}

}

void transition (String node_a, String node_b, Supernode a_super, Supernode b_super, fork_edge = false) {

	removeTimeout(node_a);

	if(fork_edge == false){
		a_super.children -= node_a;
	}

	b_super.children += (node_b);

}

void check_out_transition(String node, String out_node, Supernode parent) {

	if (!hasActiveTimeout(node) && parent.simple_children.contains(node)) { 
	
		transition(node, out_node);
	}
}

void timeout_transition(String node_a, String node_b, Supernode a_super, Supernode b_super, Int duration) {

	timeout(node_a, duration) {

		transition(node_a, node_b, a_super, b_super);
	}
}

void probability_transition(String node_a, String node_b, Supernode a_super, Supernode b_super) {

	propose_id = "propose_"+ node_a;

	propose(propose_id) {
						
		transition(node_a, node_b, a_super, b_super);
	}
}


// TODO: Wie kann man die condition in VonDa evaluieren???
void conditional_transition(String node_a, String node_b, Supernode a_super, Supernode b_super, String condition) {

	if(eval(condition) {
		transition(node_a, node_b, a_super, b_super);
	}
}

void fork_transition(String node_a, String node_b, Supernode a_super, Supernode b_super) {
						
	transition(node_a, node_b, a_super, b_super, fork_edge = true);
}

void interruptive_transition(Supernode m, String target_node) {
						
	set_inactive(m);	
	states.add(target_node);

}


if ("bye_node" in states) {
	
	emitDA(#Valediction(Bye));

	timeout("shutdown", 3000) {
		clearBehaviorsAndProposals();
		shutdown();
	}
}

