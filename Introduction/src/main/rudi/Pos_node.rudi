setup_pos_node:
	if(hello_node.initiated.contains("pos_node")) {
		if (!pos_node.active) {

			// pos_node = new Pos_node;
			pos_node.active = true;
			hello_node.super_children += pos_node;
			pos_node.parent = hello_node;
		}

		pos_node.simple_children += "pos_node_in";
		hello_node.initiated -= "pos_node";
	}

pass_by_pos_node:
	if(!pos_node.active) {
		cancel;
	}

pos_node_interruptive_edge_1:
	if (lastDA() >= #Question(Mood)) {
	
		interruptive_transition(pos_node, hello_node, "answer_node");
		cancel;
	} 

pos_node_in:
	if (pos_node.simple_children.contains("pos_node_in")) {

		transition("pos_node_in", "cool_node", pos_node, pos_node);
	}

pos_node_out:
	if (pos_node.simple_children.contains("pos_node_out")) {
	
		// Bei der Transition sollten die Variablen-Bindings aus pos_node (nicht dem parent) benutzt werden	
		transition("pos_node_out", "excuse_node", pos_node, hello_node);
		
		if(test_inactive(pos_node)) {
			hello_node.super_children -= pos_node;
			set_inactive(pos_node);
		}

		check_out_transition("pos_node_out", "hello_node_out", pos_node);
	}
	
cool_node:
	if (pos_node.simple_children.contains("cool_node")) {

		emitDA(#Connecting(PositiveFeeling));

		transition("cool_node", "why_node", pos_node, pos_node);

		check_out_transition("cool_node", "pos_node_out", pos_node);
	}

why_node:
	if (pos_node.simple_children.contains("why_node")) {
		
		if(!hasActiveTimeout("why_node")) {
			emitDA(#WHQuestion(PositiveMood));
		}
		
		timeout_transition("why_node", "great_node", pos_node, pos_node, 8000);
		
		check_out_transition("why_node", "pos_node_out", pos_node);
	}

great_node:
	if (pos_node.simple_children.contains("great_node")) {

		emitDA(#Connecting(Enthusiastic));

		check_out_transition("great_node", "pos_node_out", pos_node);
	}





