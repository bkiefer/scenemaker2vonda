
myBindings = getRdf("<cat:pos_node_bindings>");

setup_pos_node:
	if(top_level.initiated.contains("pos_node")) {
		if (!myBindings) {

			myBindings = new Pos_node_bindings;
			myBindings.simple_children += "pos_node_in";
			parentBindings = getRdf("<cat:hello_node_bindings>");
			parentBindings.super_children += myBindings;
			myBindings.parent = parentBindings;
			// Hier m√ºssten auch Variablen initialisiert werden!
		}
	}

pass_by_pos_node:
	if(!myBindings) {
		cancel;
	}

pos_node_interruptive_edge_1:
	if (req_mood == true) {
	
		interruptive_transition(myBindings, "answer_node");
		cancel;
	} 

pos_node_in:
	if (myBindings.simple_children.contains("pos_node_in") {

		transition("pos_node_in", "cool_node");
	}

pos_node_out:
	if (myBindings.simple_children.contains("pos_node_out") {
	
		// Bei der Transition sollten die Variablen-Bindings aus myBindings (nicht dem parent) benutzt werden	
		transition("pos_node_out", "excuse_node");
		// Gestrichelte Kante hier nicht notwendig, da Edge aus pos_node raus eine Epsilon-Kante ist
	}
	
cool_node:
	if (myBindings.simple_children.contains("cool_node")): {

		emitDA(#Connecting(PositiveFeeling));

		transition("cool_node", "why_node");

		check_out_transition("cool_node", "pos_node_out");
	}

why_node:
	if (myBindings.simple_children.contains("why_node")) {
		
		emitDA(#WHQuestion(PositiveMood));
		
		timeout_transition("why_node", "great_node", 10000);
		
		check_out_transition("why_node", "pos_node_out");
	}

great_node:
	if (myBindings.simple_children.contains("great_node")) {

		emitDA(#Connecting(Enthusiastic));

		states.remove("great_node");

		check_out_transition("great_node", "pos_node_out");
	}





