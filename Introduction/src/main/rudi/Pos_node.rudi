pos_node:
	Supernode this_node = ;//TODO: Datenbankanfrage(Superknoten mit Label "pos_node")
	if (this_node.oneChildActive()) {

		// Interruptive Edges:
		if (req_mood == true) {
			for (String x : this_node.states) {
				states.remove(x);
				removeTimeout(x);
			}
			for (Supernode x : this_node.superchildren) {
				x.remove_states(); // l√∂scht auch deren Timeouts
			}
			states.add("answer_node");
			
		} else {

			pos_node_in:
				if (states.contains("pos_node_in") {

					transition("pos_node_in", "cool_node");
				}

			pos_node_out:
				if ("pos_node_out" in states) {
					
					transition("pos_node_out", "excuse_node");
					// Gestrichelte Kante hier nicht notwendig, da Edge aus pos_node raus eine Epsilon-Kante ist
				}
				
			cool_node:
				if (states.contains("cool_node")): {

					emitDA(#Connecting(PositiveFeeling));

					transition("cool_node", "why_node");

					check_out_transition("cool_node", "pos_node_out");
				}

			why_node:
				if (states.contains("why_node")) {
					
					emitDA(#WHQuestion(PositiveMood));
					
					timeout_transition("why_node", "great_node", 10000);
					
					check_out_transition("why_node", "pos_node_out");
				}

			great_node:
				if (states.contains("great_node")) {

					emitDA(#Connecting(Enthusiastic));

					states.remove("great_node");

					check_out_transition("great_node", "pos_node_out");
				}
		}
	}



