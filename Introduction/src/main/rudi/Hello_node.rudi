import pos_node;
import neg_node;

hello_node:
	Supernode this_node = ;//TODO: Datenbankanfrage(Superknoten mit Label "hello_node")
	if (this_node.oneChildActive()) {
		// Interruptive edges
		if (lastDA == "bye") { //TODO: lastDA
			for (String x : this_node.states) {
		   		states.remove(x);
		      	removeTimeout(x);
			}
		    for (Supernode x : this_node.superchildren) {
				x.remove_states(); // löscht auch deren Timeouts
		   	}
		    states.add("bye_node");
		    
		} else {
			// Knoten in hello_node
			// hello_node_in (Pseudo-Startknoten)
			hello_node_in:
				if (states.contains("hello_node_in")) {
					if (true) {
						states.remove("hello_node_in");
						states.add("hi_node");
					};
				};
			// hello_node_out (Pseudo-Endknoten)
			hello_node_out:
				if (states.contains("hello_node_out")) {
					if (true) {
						states.remove("hello_node_out");
						states.add("bye_node");
					}
				}
				// Gestrichelte Kante hier nicht notwendig, da die nächsthöhere Ebene Toplevel ist

			// hi_node
			hi_node:
				if (states.contains("hi_node")) {
					emitDA("hi");
					if (true) {
						timeout("hi_node", 5000) {
							states.remove("hi_node");
							states.add("how_node");
						}
					}
					if (lastDA == "hello") {
						removeTimeout("hi_node");
						states.remove("hi_node");
						states.add("how_node");
					}
					if (!hasActiveTimeout("hi_node") && states.contains("hi_node")) {
						states.add("hello_node_out");
						states.remove("hi_node");
					}
				}

			// how_node
			how_node:
				if (states.contains("how_node")) {
					emitDA("How are you?");
					if (mood == -1) {
						removeTimeout("how_node");
						states.remove("how_node");
						states.add("neg_node");
					}
					if (mood == 1) {
						removeTimeout("how_node");
						states.remove("how_node");
						states.add("pos_node");
					}
					if (!hasActiveTimeout("how_node") && states.contains("how_node")) {
						states.add("hello_node_out");
						states.remove("how_node");
					}
				}
				
			// answer_node
			answer_node:
				if (states.contains("anwser_node")) {
					emitDA("I'm fine, thanks");
					if (true) {
						states.remove("anwser_node");
						states.add("excuse_node");
					}
					if (!hasActiveTimeout("answer_node") && states.contains("answer_node")) { 
						states.add("hello_node_out")
						states.remove("answer_node")
					}
					// excuse_node
					if (states.contains("excuse_node")) {
						emitDA("I have to go now");
					}
					if (!hasActiveTimeout("excuse_node") && states.contains("excuse_node")) {
					  states.add("hello_node_out");
					  states.remove("excuse_node");
					}
				}
		}
	}
