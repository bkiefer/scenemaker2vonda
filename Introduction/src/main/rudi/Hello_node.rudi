setup_hello_node:
	if(global.initiated.contains("hello_node")) {
		if (!hello_node.active) {

			hello_node.active = true;
			global.super_children += hello_node;
			hello_node.parent = global;
			
			//var_timedOut = new Variable;
			//var_timedOut.name = "timedOut";
			//var_timedOut.valueBool = false;
			//hello_node.variables += var_timedOut;

			hello_node.timedOut = false;
		}

		hello_node.simple_children += "hello_node_in";
		global.initiated -= "hello_node";
	}

pass_by_hello_node:
	if(!hello_node.active) {
		cancel;
	}

hello_node_interruptive_edge_1:
	if (lastDA() >= #InitialGoodbye(Bye)) {

		interruptive_transition(hello_node, global, "bye_node");
		cancel;
	}

hello_node_in:
	if (hello_node.simple_children.contains("hello_node_in")) {

		transition("hello_node_in", "hi_node", hello_node, hello_node);
	}

hello_node_out:
	if (hello_node.simple_children.contains("hello_node_out")) {
	
		// Bei der Transition sollten die Variablen-Bindings aus hello_node (nicht global) benutzt werden (wichtig nur fÃ¼r Conditionals)
		transition("hello_node_out", "bye_node", hello_node, global);
		
		if(test_inactive(hello_node)) {
			global.super_children -= hello_node;
			set_inactive(hello_node);
		}

		check_out_transition("hello_node_out", "main_out", hello_node);
	}

hi_node:
	if (hello_node.simple_children.contains("hi_node")) {

		if(!hasActiveTimeout("hi_node")) {
			emitDA(#InitialGreeting(Greet));
		}

		timeout_transition("hi_node", "how_node", hello_node, hello_node, 5000);

		if (lastDA() >= #InitialGreeting(Greet)) {
			transition("hi_node", "how_node", hello_node, hello_node);
		}
		
		check_out_transition("hi_node", "hello_node_out", hello_node);					
	}

how_node:
	if (hello_node.simple_children.contains("how_node")) {

		emitDA(#ChoiceQuestion(Mood));
		
		transition("how_node", "wait_node", hello_node, hello_node);

		check_out_transition("how_node", "hello_node_out", hello_node);					
	}

wait_node:
	if (hello_node.simple_children.contains("wait_node")) {
		
		timeout_transition("wait_node", "excuse_node", hello_node, hello_node, 16000);

		answer = lastDA();

		if (answer >= #Inform(Mood)) {
			
			if(answer.what == "negative") {
				super_transition("wait_node", hello_node, "neg_node");
			}
			if (answer.what == "positive") {
				super_transition("wait_node", hello_node, "pos_node");
			}
		}

		check_out_transition("wait_node", "hello_node_out", hello_node);	

	}
	
answer_node:
	if (hello_node.simple_children.contains("answer_node")) {

		emitDA(#Inform(Mood));

		transition("answer_node", "excuse_node", hello_node, hello_node);						

		check_out_transition("answer_node", "hello_node_out", hello_node);
	}

excuse_node:
	if (hello_node.simple_children.contains("excuse_node")) {
		
		emitDA(#InitialGoodbye(Leave));
	
		check_out_transition("excuse_node", "hello_node_out", hello_node);
		
	}

import Pos_node;
import Neg_node;
