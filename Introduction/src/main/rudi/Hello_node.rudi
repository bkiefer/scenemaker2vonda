import pos_node;
import neg_node;

hello_node:
	Supernode this_node = ; //TODO: Datenbankanfrage(Superknoten mit Label "hello_node")
	
	if (this_node.oneChildActive()) {
		
		hello_node_interruptive_edge_1:
			if (lastDA() >= #InitialGoodbye(Bye)) {
				for (String x : this_node.states) {
			   		states.remove(x);
				  	removeTimeout(x);
				}
				for (Supernode x : this_node.superchildren) {
					x.remove_states(); // löscht auch deren Timeouts
			   	}
				states.add("bye_node");
		    
		} else {
	
			hello_node_in:
				if (states.contains("hello_node_in")) {

					transition("hello_node_in", "hi_node");

				};

			hello_node_out:
				if (states.contains("hello_node_out")) {
					
					transition("hello_node_out", "bye_node");
					// Gestrichelte Kante hier nicht notwendig, da die nächsthöhere Ebene Toplevel ist

				}
				

			hi_node:
				if (states.contains("hi_node")) {

					emitDA(#InitialGreeting(Greet));

					timeout_transition("hi_node", "how_node", 5000);
			
					if (lastDA == "hello") {
						transition("hi_node", "how_node");
					}
					
					check_out_transition("hi_node", "hello_node_out");					

				}

			how_node:
				if (states.contains("how_node")) {

					emitDA(#ChoiceQuestion(Mood));

					if (mood == -1) {
						transition("how_node", "neg_node");
					}
					if (mood == 1) {
						transition("how_node", "pos_node");
					}
					
					check_out_transition("how_node", "hello_node_out");					

					}
				}
				
			answer_node:
				if (states.contains("anwser_node")) {

					emitDA(#Inform(Mood));

					transition("answer_node", "excuse_node");						

					check_out_transition("answer_node", "hello_node_out");
				}

			excuse_node:
				if (states.contains("excuse_node")) {
					
					emitDA(#InitialGoodbye(Leave));
				
					check_out_transition("excuse_node", "hello_node_out");
					
				}
		}
	}
