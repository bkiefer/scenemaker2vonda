void set_inactive(Supernode m) {

	for (String x : m.simple_children) {removeTimeout(x);}
	for (Supernode y : m.super_children) {set_inactive(y);}
	
	m.active = false;
	m.simple_children = {};
	m.super_children = {};
	m.initiated = {};
}

boolean test_inactive(Supernode m) {
 
	return ((!m.super_children) && (!m.simple_children) && (!m.initiated));

}

void super_transition(String node_a, Supernode a_parent, String supernode_b) {

	cancelTimeout(node_a);

	if(a_parent.simple_children.contains(node_a)) {
		a_parent.simple_children -= node_a;
	}

	a_parent.initiated += supernode_b;
}

void transition (String node_a, String node_b, Supernode a_parent, Supernode b_parent) {

	cancelTimeout(node_a);

	if(a_parent.simple_children.contains(node_a)) {
		a_parent.simple_children -= node_a;
	}

	b_parent.simple_children += node_b;
}

void check_out_transition(String a, String b, Supernode a_parent, Supernode b_parent) {

	if (!hasActiveTimeout(a) && a_parent.simple_children.contains(a)) { 
	
		transition(a, b, a_parent, b_parent);
	}
}

void timeout_transition(String node_a, String node_b, Supernode a_parent, Supernode b_parent, int duration) {

	timeout(node_a, duration) {

		transition(node_a, node_b, a_parent, b_parent);
	}
}

void timeout_super_transition(String node_a, Supernode a_parent, String supernode_b, int duration) {

	timeout(node_a, duration) {

		super_transition(node_a, a_parent, supernode_b);
	}
}

void probability_transition(String node_a, String node_b, Supernode a_parent, Supernode b_parent) {

	propose_id = "propose_"+ node_a;
	
	if(a_parent.simple_children.contains(node_a)) {
		a_parent.simple_children -= node_a;
	}

	propose(propose_id) {					
		transition(node_a, node_b, a_parent, b_parent);
	}
}

void probability_super_transition(String node_a, Supernode a_parent, String node_b) {

	propose_id = "propose_"+ node_a;
	
	if(a_parent.simple_children.contains(node_a)) {
		a_parent.simple_children -= node_a;
	}

	propose(propose_id) {					
		super_transition(node_a, a_parent, node_b);
	}
}

void interruptive_transition(Supernode m, Supernode parent, String target_node) {
						
	set_inactive(m);	
	parent.simple_children += target_node;
}

void interruptive_super_transition(Supernode m, Supernode parent, String target_supernode) {
						
	set_inactive(m);	
	parent.initiated += target_supernode;
}

setup_mainAgent: 
	if(!mainAgent.active) {

		timeout("MainAgentStart", 1400) {

			mainAgent.active = true;
			mainAgent.simple_children += "mainAgent_in";

			mainAgent.nice = 0;
		}
	}

mainAgent_in:
	if(mainAgent.simple_children.contains("mainAgent_in")) {


			super_transition("mainAgent_in", mainAgent, "hello_node");

			check_out_transition("mainAgent_in", "mainAgent_out", mainAgent, mainAgent);
	}

mainAgent_out: 
	if(mainAgent.simple_children.contains("mainAgent_out")) {

		set_inactive(mainAgent);
		shutdown();
	}

excuse_node:
	if(mainAgent.simple_children.contains("excuse_node")) {

		if(!hasActiveTimeout("excuse_node")) {

			emitDA(#InitialGoodbye(Leave));
			lastDAprocessed();
		}

		transition("excuse_node", "bye_node", mainAgent, mainAgent);

		check_out_transition("excuse_node", "mainAgent_out", mainAgent, mainAgent);
	}

bye_node:
	if(mainAgent.simple_children.contains("bye_node")) {

		if(!hasActiveTimeout("bye_node")) {

			emitDA(#Valediction(Bye));
		}


		check_out_transition("bye_node", "mainAgent_out", mainAgent, mainAgent);
	}

import Hello_node;
