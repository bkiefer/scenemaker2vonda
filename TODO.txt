

5. Main.java "ersetzen"; Projekt als Shell-Script ausführbar machen (schöneres Handling von Kommandozeilenparametern!) -> Max 
-> Parameter: 1) Pfad zu Sceneflow/Automatendefinitionsdatei 2) Pfad zum Output Directory (ggf. Vonda-Projekt Directory, falls buildVondaProject == true)
3) buildVondaProject (boolean, soll das VondaProjekt gebaut werden?, default = false) 4) postProcessDialogueActs (boolean, Default = true)


7. Kurzanleitung: Wie baut man den Compiler, was ist im Hauptverzeichnis wo, wofür  -> Simon


8. ca. 2-4 Seiten Projektdokumentation: 
	- Welche Knoten / Kanten gibt es
	- Wie und wo kann man Variablen definieren, was ist der Scope?
	- Wie funktioniert die Übersetzung, so dass die Funktionalität des Automaten entsteht, z.B., wie funktioniert das "multi-process" Modell?
	- Was wird in der Ontologie wie dargestellt?
	- (Eventuell) Was muss man noch tun, um ein komplettes System zu erhalten (NICHT ASR/Interpretation/Generierung etc.), d.h.welche Teile fehlen, wenn man den 			Automaten kompiliert hat
	- Was fehlt oder sollte bald hinzugefügt werden?
	- Was könnte/sollte längerfristig hinzugefügt werden?
-> Simple node names dekapitalisieren wir, Supernodes und zugehörige rudi-Dateien werden starten automatisch mit Uppercase
-> Methode, Kommandozeilenparameter "postProcessDialogueActs" erklären (und warum sie nötig ist)


9. Bernd fragen, ob Endprodukt auch auf GitHub (öffentlich) soll bzw. auf einen DFKI-Server; an die entsprechende Stelle kopieren


